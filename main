from itertools import count
import telebot
from telebot import types
import sqlite3

API_TOKEN = '5491063411:AAHuG5JGbBJqBQOpxiskOiPy2FEdsnCPxOQ'
bot = telebot.TeleBot(API_TOKEN)

con = sqlite3.connect('users.db', check_same_thread=False)
cur = con.cursor()
cur.execute('''CREATE TABLE IF NOT EXISTS users
                   (nickname TEXT PRIMARY KEY, username TEXT, pass TEXT, chat_id TEXT)''')

def create_user(message):
    msg = bot.reply_to(message, """\
                    In this case, answer a couple of questions.\nWhat is your nickname?\
                    """)

    bot.register_next_step_handler(msg, input_name)

def input_name(message):
    name = message.text
    try:
        cur.execute("INSERT INTO users VALUES (?, ?, ?, ?)", (name, message.from_user.username, '', ''))
        con.commit()  
    except sqlite3.IntegrityError:
        bot.send_message(message.chat.id, "You already have account.")
        exit()

    bot.delete_message(message.chat.id, message.message_id)

    msg = bot.send_message(message.chat.id, """\
            Now enter your password.\
            """)
    bot.register_next_step_handler(msg, input_pass)

def input_pass(message):
    password = message.text
    chat_id = message.chat.id
    cur.execute("UPDATE users SET pass=? WHERE username=?", (password, message.from_user.username))
    cur.execute("UPDATE users SET chat_id=? WHERE username=?", (chat_id, message.from_user.username))
    con.commit() 
    bot.delete_message(message.chat.id, message.message_id)

    btn1 = types.KeyboardButton("Find game")
    btn2 = types.KeyboardButton("Exit")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(btn1, btn2)

    bot.send_message(message.chat.id, "You have completed registration.".format(message.from_user), reply_markup=markup)

def log_in(message):
    res = cur.execute("SELECT nickname FROM users WHERE users.username=?", (message.from_user.username,))
    msg = bot.send_message(message.chat.id, f"I found your profile: {res.fetchone()[0]}. Enter password.")

    bot.register_next_step_handler(msg, get_pass)

def get_pass(message):
    password = message.text
    res = cur.execute("SELECT pass FROM users WHERE users.username=?", (message.from_user.username,))
    enter_password = res.fetchone()[0]

    if password == enter_password:
        btn1 = types.KeyboardButton("Find game")
        btn2 = types.KeyboardButton("Exit")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "Successfully logged in.".format(message.from_user), reply_markup=markup)
        cur.execute("UPDATE users SET chat_id=? WHERE username=?", (message.chat.id, message.from_user.username))
        con.commit()

def get_nickname(message):
    res = cur.execute("SELECT nickname FROM users WHERE users.username=?", (message.from_user.username,))
    con.commit()
    return res.fetchone()[0]

def find_player(game):
    res = cur.execute("SELECT chat_id FROM ?", (game,))
    con.commit()

    cur.execute("DELETE FROM tic_tac_toe WHERE nickname=?", (res.fetchone()[0]))
    con.commit()
    return res.fetchone()[0]

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton("Yes, I'm new user")
    btn2 = types.KeyboardButton("No, I'm already registered")

    markup.add(btn1, btn2)

    bot.send_message(message.chat.id, "Hi there, I am GameBot.\nI am here to play with other people. Are you a new user?".format(message.from_user), reply_markup=markup)
    
@bot.message_handler(content_types=['text'])
def user(message):

    if message.text == "Yes, I'm new user":
        create_user(message)

    elif message.text == "No, I'm already registered":
        log_in(message)

    elif message.text == "Exit":
        cur.execute("UPDATE users SET chat_id=? WHERE username=?", ("", message.from_user.username))
        con.commit()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("/start")
        markup.add(btn1)
        bot.send_message(message.chat.id, "You exited.".format(message.from_user), reply_markup=markup)

    elif message.text == "Find game":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("Tic Tac Toe")
        markup.add(btn1)
        bot.send_message(message.chat.id, "Choice game.".format(message.from_user), reply_markup=markup)

    elif message.text == "Tic Tac Toe":
        cur_ttt = con.cursor()
        cur_ttt.execute('''CREATE TABLE IF NOT EXISTS tic_tac_toe
                           (nickname TEXT PRIMARY KEY, chat_id TEXT)''')

        res = cur_ttt.execute("SELECT chat_id FROM tic_tac_toe")
        print(res.fetchall())
        print(res.fetchone())

        if len(res.fetchall()) < 1:
            bot.send_message(message.chat.id, "I'm looking for user for you.")
            try:
                cur_ttt.execute("INSERT INTO tic_tac_toe VALUES (?, ?)", (get_nickname(message), message.chat.id))
                con.commit()  
            except sqlite3.IntegrityError:
                bot.send_message(message.chat.id, "You are already looking for the game.")
        else:
            bot.send_message(message.chat.id, "I found player.")
            cur_ttt.execute("DELETE FROM tic_tac_toe WHERE chat_id=?", (res.fetchmany()[0][0]))
            con.commit()


    else:
        bot.send_message(message.chat.id, "I do not know this command")

bot.infinity_polling()